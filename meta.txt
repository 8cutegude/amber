ParserMetadata { expr: [Tok[pub 1:1], Tok[fun 1:5], Tok[input 1:9], Tok[<symbol: ( > 1:14], Tok[<symbol: ) > 1:15], Tok[<symbol: { > 1:17], Tok[$read$ 2:5], Tok[echo 3:5], Tok['$REPLY' 3:10], Tok[<symbol: } > 4:1], Tok[pub 6:1], Tok[fun 6:5], Tok[replace_once 6:9], Tok[<symbol: ( > 6:21], Tok[source 6:22], Tok[, 6:28], Tok[pattern 6:30], Tok[, 6:37], Tok[replacement 6:39], Tok[<symbol: ) > 6:50], Tok[<symbol: { > 6:52], Tok[echo 7:5], Tok[$echo "\$\{source/ 7:10], Tok[<symbol: { > 7:28], Tok[pattern 7:29], Tok[<symbol: } > 7:36], Tok[/ 7:37], Tok[<symbol: { > 7:38], Tok[replacement 7:39], Tok[<symbol: } > 7:50], Tok[}"$ 7:51], Tok[<symbol: } > 8:1], Tok[pub 10:1], Tok[fun 10:5], Tok[replace 10:9], Tok[<symbol: ( > 10:16], Tok[source 10:17], Tok[, 10:23], Tok[pattern 10:25], Tok[, 10:32], Tok[replacement 10:34], Tok[<symbol: ) > 10:45], Tok[<symbol: { > 10:47], Tok[echo 11:5], Tok[$echo "\$\{source// 11:10], Tok[<symbol: { > 11:29], Tok[pattern 11:30], Tok[<symbol: } > 11:37], Tok[/ 11:38], Tok[<symbol: { > 11:39], Tok[replacement 11:40], Tok[<symbol: } > 11:51], Tok[}"$ 11:52], Tok[<symbol: } > 12:1], Tok[pub 14:1], Tok[fun 14:5], Tok[replace_regex 14:9], Tok[<symbol: ( > 14:22], Tok[source 14:23], Tok[<symbol: : > 14:29], Tok[Text 14:31], Tok[, 14:35], Tok[pattern 14:37], Tok[<symbol: : > 14:44], Tok[Text 14:46], Tok[, 14:50], Tok[replacement 14:52], Tok[<symbol: : > 14:63], Tok[Text 14:65], Tok[<symbol: ) > 14:69], Tok[<symbol: : > 14:70], Tok[Text 14:72], Tok[<symbol: { > 14:77], Tok[echo 15:5], Tok[$echo " 15:10], Tok[<symbol: { > 15:17], Tok[source 15:18], Tok[<symbol: } > 15:24], Tok[" | sed -e "s/ 15:25], Tok[<symbol: { > 15:39], Tok[pattern 15:40], Tok[<symbol: } > 15:47], Tok[/ 15:48], Tok[<symbol: { > 15:49], Tok[replacement 15:50], Tok[<symbol: } > 15:61], Tok[/g"$ 15:62], Tok[<symbol: } > 16:1], Tok[pub 18:1], Tok[fun 18:5], Tok[file_read 18:9], Tok[<symbol: ( > 18:18], Tok[path 18:19], Tok[<symbol: ) > 18:23], Tok[<symbol: { > 18:25], Tok[echo 19:5], Tok[$cat " 19:10], Tok[<symbol: { > 19:16], Tok[path 19:17], Tok[<symbol: } > 19:21], Tok["$ 19:22], Tok[<symbol: } > 20:1], Tok[pub 22:1], Tok[fun 22:5], Tok[file_write 22:9], Tok[<symbol: ( > 22:19], Tok[path 22:20], Tok[, 22:24], Tok[content 22:26], Tok[<symbol: ) > 22:33], Tok[<symbol: { > 22:35], Tok[$echo " 23:5], Tok[<symbol: { > 23:12], Tok[content 23:13], Tok[<symbol: } > 23:20], Tok[" > " 23:21], Tok[<symbol: { > 23:26], Tok[path 23:27], Tok[<symbol: } > 23:31], Tok["$ 23:32], Tok[<symbol: } > 24:1], Tok[pub 26:1], Tok[fun 26:5], Tok[file_append 26:9], Tok[<symbol: ( > 26:20], Tok[path 26:21], Tok[, 26:25], Tok[content 26:27], Tok[<symbol: ) > 26:34], Tok[<symbol: { > 26:36], Tok[$echo " 27:5], Tok[<symbol: { > 27:12], Tok[content 27:13], Tok[<symbol: } > 27:20], Tok[" >> " 27:21], Tok[<symbol: { > 27:27], Tok[path 27:28], Tok[<symbol: } > 27:32], Tok["$ 27:33], Tok[<symbol: } > 28:1]], index: 10, path: Some("[standard library]"), code: Some("pub fun input() {\n    $read$\n    echo '$REPLY'\n}\n\npub fun replace_once(source, pattern, replacement) {\n    echo $echo \"\\$\\{source/{pattern}/{replacement}}\"$\n}\n\npub fun replace(source, pattern, replacement) {\n    echo $echo \"\\$\\{source//{pattern}/{replacement}}\"$\n}\n\npub fun replace_regex(source: Text, pattern: Text, replacement: Text): Text {\n    echo $echo \"{source}\" | sed -e \"s/{pattern}/{replacement}/g\"$\n}\n\npub fun file_read(path) {\n    echo $cat \"{path}\"$\n}\n\npub fun file_write(path, content) {\n    $echo \"{content}\" > \"{path}\"$\n}\n\npub fun file_append(path, content) {\n    $echo \"{content}\" >> \"{path}\"$\n}"), binop_border: None, mem: Memory { scopes: [ScopeUnit { vars: {}, funs: {} }], function_map: FunctionMap { map: {}, current_id: 0 }, variable_id: 0, exports: Exports { values: [] } }, debug: None, trace: [PositionInfo { path: Some("test.ab"), position: Pos(2, 1), row: 2, col: 1, len: 6, data: None }, PositionInfo { path: Some("test4.ab"), position: Pos(1, 1), row: 1, col: 1, len: 6, data: None }], import_history: ImportHistory { imports: ["test.ab", "test4.ab", "[standard library]"], import_graph: [[1], [2], []], import_blocks: [None, None, None], exports: [None, None, None] }, loop_ctx: false, function_ctx: false, messages: [] }
false
