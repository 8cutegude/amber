let targets = [
    "aarch64-apple-darwin",
    "aarch64-unknown-linux-musl",
    "x86_64-apple-darwin",
    "x86_64-unknown-linux-musl"
]

// Check if such directory exists
$test -f "Cargo.toml" > /dev/null$ failed {
    echo "Please run this command in the project root directory"
    unsafe $exit 1$
}

unsafe {
    if status == 0 {
        let target_str = ""
        loop target in targets {
            target_str += "--target {target} "
        }
        $cargo build --release {target_str}$
        // Move ambers to the release directory
        $mv target/aarch64-apple-darwin/release/amber target/release/amber_macos_aarch64$
        $mv target/aarch64-unknown-linux-musl/release/amber target/release/amber_linux_aarch64$
        $mv target/x86_64-apple-darwin/release/amber target/release/amber_macos_x86_64$
        $mv target/x86_64-unknown-linux-musl/release/amber target/release/amber_linux_x86_64$
        // Recompile installer scripts
        $cargo run -- setup/install.ab setup/install.sh$
        $cargo run -- setup/uninstall.ab setup/uninstall.sh$
    } else {
        echo "Please run this command in the project root directory"
    }
}
